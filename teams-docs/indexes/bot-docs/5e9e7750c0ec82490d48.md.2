Prerequisites

To get started, ensure that you have the following tools:

| Install | For using... |
| --- | --- |
| [Visual Studio Code](https://code.visualstudio.com/download) | JavaScript, TypeScript, and Python build environments. Use the latest version. |
| [Teams Toolkit](https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension) | Microsoft Visual Studio Code extension that creates a project scaffolding for your app. Use the latest version.|
| [Python](https://www.python.org/) | Python is an interpreted and object-oriented programming language with dynamic semantics. Use versions between 3.8 to 4.0. |
| [Poetry](https://python-poetry.org/docs/#installing-with-pipx) | Dependency management and packaging tool for Python.|
| [Python VSCode Extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python) | Provides rich support for Python on VSCode. |
|[Git](https://git-scm.com/downloads)|Git is a version control system that helps you manage different versions of code within a repository. |
| [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | To collaborate with everyone, you work with through apps for chat, meetings, and call all in one place.|
| [OpenAI](https://openai.com/api/) or [Azure OpenAI](https://oai.azure.com/portal)| First create your OpenAI API key to use OpenAI's GPT. If you want to host your app or access resources in Microsoft Azure, you must create an Azure OpenAI service.|
| [Microsoft&nbsp;Edge](https://www.microsoft.com/edge/) (recommended) or [Google Chrome](https://www.google.com/chrome/) | A browser with developer tools. |
| [Microsoft 365 developer account](/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) | Access to Teams account with the appropriate permissions to install an app and [enable custom Teams apps and turn on custom app uploading](../../../concepts/build-and-test/prepare-your-o365-tenant.md#enable-custom-teams-apps-and-turn-on-custom-app-uploading). |

<br/>
If you've already run the samples before or encountered a runtime error, follow these steps to start fresh:

* Check all the `.env` and `env/.env.*.*` files in the sample and delete any automatically populated values to ensure that Teams Toolkit generates new resources for you.
* If you don’t want Teams Toolkit to generate the app ID and password, update the `BOT_ID` and `BOT_PASSWORD` in the `.env` file with your own values.
* Remove values or leave the values blank for  **SECRET_BOT_PASSWORD** and **TEAMS_APP_UPDATE_TIME** in the `.env` file to avoid conflicts.

Teams Toolkit automatically provisions `BOT_ID` and `BOT_PASSWORD` resources. If you want to use your own resources, you need to manually add them to the `.env` file. Teams Toolkit doesn't auto-generate the following resources:

* An Azure OpenAI or OpenAI key
* A database or similar storage options

## Build and run the sample app

1. Go to the [sample](https://github.com/microsoft/teams-ai/tree/main/python/samples).

1. Clone the repository to test the sample app.

   ```
   git clone https://github.com/microsoft/teams-ai.git
   ```

1. Go to the **python** folder.

   ```
   cd teams-ai/python
   ```

1. Go to the folder where you cloned the repository and select **04.ai.c.actionMapping.lightBot**. All the files for the LightBot sample are listed under the **EXPLORER** section in Visual Studio Code.

1. Under **EXPLORER**, duplicate the **sample.env** file and update the duplicate file to **.env**.

   # [OpenAI key](#tab/OpenAI-key2)

   Go to the `env` folder and update the following code in `./env/.env.local.user` file:

      ```text
      SECRET_OPENAI_KEY=<your OpenAI key>

      ```

   # [Azure OpenAI](#tab/Azure-OpenAI2)

   Go to the `env` folder and update the following code in `./env/.env.local.user` file:

      ```text
      SECRET_AZURE_OPENAI_KEY=<your Azure OpenAI key>
      SECRET_AZURE_OPENAI_ENDPOINT=<your Azure OpenAI Endpoint>

      ```

    ---

1. To install the following dependencies, go to **View** > **Terminal** and run the following commands:

   |Dependencies |Command |
   | --- | --- |
   | python-dotenv | pip install python-dotenv |
   | load-dotenv | pip install load-dotenv |
   | teams-ai | pip install teams-ai |
   | botbuilder-core | pip install botbuilder-core |

1. Update `config.json` and `bot.py` with your model deployment name.

1. Go to **View** > **Command Palette...** or select **Ctrl+Shift+P**.

1. Enter **Python: Create Environment** to create a virtual environment.

1. To debug your app, select the **F5** key.

   A browser tab opens a Teams web client requesting to add the bot to your tenant.

1. Select **Add**.

   :::image type="content" source="../../../assets/images/bots/lightbot-add.png" alt-text="Screenshot shows adding the LightBot app.":::

   A chat window opens.

1. In the message compose area, send a message to invoke the bot.

   :::image type="content" source="../../../assets/images/bots/lightbot-output.png" alt-text="Screenshot shows an example of the LightBot output.":::

::: zone-end

## Additional tools

You can also use the following tools to run and set up a sample:

1. **Teams Toolkit CLI**: You can use the Teams Toolkit CLI to create and manage Teams apps from the command line. For more information, see [Teams Toolkit CLI set up instructions](https://github.com/microsoft/teams-ai/blob/main/getting-started/OTHER/TEAMS-TOOLKIT-CLI.md).

1. **Bot Framework Emulator**: The [Bot Framework Emulator](https://github.com/microsoft/BotFramework-Emulator) is a desktop application that allows you to test and debug your bot locally. You can connect to your bot by entering the bot’s endpoint URL and Microsoft app ID and password. You can then send messages to your bot and see its responses in real-time. For more information, see [Bot Framework Emulator set up instructions](https://github.com/microsoft/teams-ai/blob/main/getting-started/OTHER/BOTFRAMEWORK-EMULATOR.md).

1. **Manual setup**: If you prefer to set up your resources manually, you can do so by following the instructions provided by the respective services. For more information, see [manual set up instructions](https://github.com/microsoft/teams-ai/blob/main/getting-started/OTHER/MANUAL-RESOURCE-SETUP.md).

## Next step

> [!div class="nextstepaction"]
> [Teams AI library FAQ](coversational-ai-faq.md)
