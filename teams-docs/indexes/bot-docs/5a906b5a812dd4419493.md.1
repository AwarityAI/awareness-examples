---
title: Interactive Notification Bot Overview
author: surbhigupta
description: Learn how interactive notification bot works in Teams, notification based events, installation, customize notification and add authentication for notification API.
ms.topic: conceptual
ms.author: surbhigupta
ms.localizationpriority: high
---

# Interactive notification bot in Teams

Microsoft Teams Toolkit enables you to build applications that capture events and send them as interactive notifications to a personal, group chat, or a channel in Microsoft Teams. You can send notifications as plain text or [Adaptive Cards](../../../task-modules-and-cards/cards/cards-reference.md). The notification bot template creates an app that sends a message to Teams with Adaptive Cards triggered by HTTP post request.

The app template is built using the TeamsFx SDK, which provides a simple set of functions over Microsoft Bot Framework to implement your requirement. For example, a travel agency builds an app in Teams for their users to keep them up-to-date with the weather forecast. In the following flowchart, a Teams app notifies about the weather forecast to the users using an Adaptive Card:

:::image type="content" source="../../../assets/images/notification-bot/notification-new-scenario-diagram.png" alt-text="weather forecast sample notification scenario" lightbox="../../../assets/images/notification-bot/notification-new-scenario-diagram.png":::

You can send a bot notification in the following scenarios:

* You want to notify everyone in a channel or chat about the same or related content​.

* Highly customizable UI in a Card​

* Need quick response, include media content, or action buttons​.

* Send scheduled notifications​

* Light up double badges on both Activity and Chat, Channel or App​

* Add template in source code​.

* Handling localization manually.

**Advantages**

* Facilitates notifications to a personal, group chat, and in a channel, using APIs from TeamsFx SDK.
* Enhances user experience by customizing notification with an Adaptive Card.
* Provides multiple mechanisms to trigger notifications such as HTTP and schedule timer trigger with Azure Functions.

* A notification card easily integrates with a bot and provides a consistent user experience within the Bot app.​

> [!NOTE]
> Bot application needs to be installed with the corresponding scope before sending notification.

[Back to top](#interactive-notification-bot-in-teams)

## Notification based on events

Bot Framework SDK provides the functionality to proactively message in Teams. TeamsFx SDK provides the functionality to manage bot's conversation references when a bot event is triggered. TeamsFx SDK recognizes the following bot events:

|**Event**  |**Behavior**  |
|---------|---------|
|The first time you install a bot to a person, group, or Team.     |Add the target conversation reference to the storage.         |
|When the bot is uninstalled from a person, group, or Team.     |Remove the target conversation reference from the storage.         |
|When the team installed by bot is deleted.     |Remove the target conversation reference from the storage.         |
|When the team installed by bot is restored.     |Add the target conversation reference to the storage.         |
|When the bot sends messages.     |When the target conversation reference doesn't exist, add it to the storage.         |

:::image type="content" source="../../../assets/images/notification-bot/notification-new-event.png" alt-text="new notification event sample":::

When you send notifications, TeamsFx SDK creates a new conversation from the selected conversation reference, and then sends a message. For advanced usage, you can directly access the conversation reference to execute your own bot logic:

# [TypeScript](#tab/ts1)

```TypeScript
// list all installation targets
for (const target of await notificationApp.notification.installations()) {
    // call Bot Framework's adapter.continueConversationAsync()
    await target.adapter.continueConversationAsync(
        target.botAppId,
        target.conversationReference,
        async (context) => {
            // your own bot logic
            await context...
        }
    );
}
```

# [C#](#tab/csharp1)

```C#
   // list all installation targets
    foreach (var target in await _conversation.Notification.GetInstallationsAsync()) {
    // call Bot Framework's adapter.ContinueConversationAsync()
    await target.Adapter.ContinueConversationAsync(
        target.BotAppId,
        target.ConversationReference,
        async (context, ctx) =>
        {
            // your own bot logic
            await context...
        },
        cancellationToken);
}
```

---

[Back to top](#interactive-notification-bot-in-teams)

## Notification bot installation

A notification bot needs to be installed into a team, or a group chat, or as personal app, depending on the required scope. You need to select the installation target before adding the bot to your app.

:::image type="content" source="../../../assets/images/notification-bot/notification-installation-scope.png" alt-text="add installation scope":::

For more install options, see [configure default install options](../../../concepts/deploy-and-publish/apps-publish-overview.md#configure-default-install-options).
For uninstalling, see [remove an app from Teams](https://support.microsoft.com/en-us/office/remove-an-app-from-teams-0bc48d54-e572-463c-a7b7-71bfdc0e4a9d).

[Back to top](#interactive-notification-bot-in-teams)

## Customize notification

You can make the following customizations to extend the notification template to fit your business need:

* [Customize the trigger point from event source](#customize-the-trigger-point-from-event-source)
* [Customize the notification content](#customize-the-notification-content)
* [Customize where notifications are sent](#customize-where-notifications-are-sent)

### Customize the trigger point from event source

You can customize the following triggers:

* `Restify` based notification:

  * When an HTTP request is sent to `src/index.js` entry point, the default implementation sends an Adaptive Card to Teams. You can customize this event by modifying `src/index.js`. A typical implementation can call an API to retrieve events, data, or both that can send an Adaptive Card as required. You can perform the following to add more triggers:

    * Create a new routing: `server.post("/api/new-trigger", ...)`.
    * Add timer trigger(s) from widely used npm packages, such as [cron](https://www.npmjs.com/package/cron), [node-schedule](https://www.npmjs.com/package/node-schedule), or from other packages.

    > [!NOTE]
    > By default Teams Toolkit scaffolds a single `restify` entry point in `src/index.js`.

* Azure Functions based notification:

  * When you select `timer` trigger, the default implemented Azure Function timer trigger `src/timerTrigger.ts` sends an Adaptive Card every 30 seconds. You can edit the file `*Trigger/function.json` to customize the `schedule` property. For more information, see [Azure Function documentation](/azure/azure-functions/functions-bindings-timer?tabs=python-v2%2Cin-process&pivots=programming-language-javascript#ncrontab-expressions).

    :::image type="content" source="../../../assets/images/notification-bot/notification-timer-triggered.png" alt-text="sample of timer triggered notification":::

  * When you select `http` trigger, the HTTP request triggers the notification, and the default implementation sends an Adaptive Card to Teams. You can change this event by customizing `src/*Trigger.ts`. This implementation can call an API to retrieve events, data, or both, which can send an Adaptive Card as required.

    :::image type="content" source="../../../assets/images/notification-bot/notification-http-triggered.png" alt-text="sample of HTTP triggered notification":::

* Azure Function triggers:

  * `Event Hub` trigger to send notifications when an event is pushed to Azure Event Hub.

  * `Cosmos DB` trigger to send notifications when a Cosmos document is created or updated.

For more information on support triggers, see [Azure Functions support triggers](/azure/azure-functions/functions-triggers-bindings?tabs=javascript#supported-bindings).

### Customize the notification content

The file `src/adaptiveCards/notification-default.json` defines the default Adaptive Card. You can use the [Adaptive Card designer](https://adaptivecards.io/designer/) to help visually design your Adaptive Card UI. The `src/cardModels.ts` defines a data structure that is used to load data for the Adaptive Card. The binding between the card model and the Adaptive Card is done by matching name such as `CardData.title` maps to `${title}` in the Adaptive Card. You can add, edit, or remove properties and their bindings to customize the Adaptive Card as required.

You can also add new cards if needed. For more information on how to build different types of Adaptive Cards with a list or table of dynamic contents using `ColumnSet` and `FactSet`, see [Adaptive Card notification sample](https://github.com/OfficeDev/TeamsFx-Samples/tree/v3/adaptive-card-notification).

### Customize where notifications are sent

You can customize sending the notification to the following targets:

* Notifications to a personal chat:

  # [TypeScript](#tab/ts2)

    ```TypeScript
    // list all installation targets
    for (const target of await notificationApp.notification.installations()) {
        // "Person" means this bot is installed as Personal app
        if (target.type === "Person") {
            // Directly notify the individual person
            await target.sendAdaptiveCard(...);
        }
    }
    ```

  # [C#](#tab/csharp2)

    ```C#
    // list all installation targets
    foreach (var target in await _conversation.Notification.GetInstallationsAsync()) {
        // "Person" means this bot is installed as Personal app
        if (target.Type == NotificationTargetType.Person)
        {
            // Directly notify the individual person
            await target.SendAdaptiveCard(...);
        }
    }
    ```

---

* Notifications to a group chat:

  # [TypeScript](#tab/ts3)

    ```TypeScript
    // list all installation targets
    for (const target of await notificationApp.notification.installations()) {
        // "Group" means this bot is installed to a Group Chat
        if (target.type === "Group") {
            // Directly notify the Group Chat
            await target.sendAdaptiveCard(...);

                // List all members in the Group Chat then notify each member
                const members = await target.members();
                for (const member of members) {
                    await member.sendAdaptiveCard(...);
                }
            }
        
    }
    ```

  # [C#](#tab/csharp3)

    ```C#
    // list all installation targets
    foreach (var target in await _conversation.Notification.GetInstallationsAsync()) {
        // "Group" means this bot is installed to a Group Chat
        if (target.Type == NotificationTargetType.Group)
        {
            // Directly notify the Group Chat
            await target.SendAdaptiveCard(...);
        // List all members in the Group Chat then notify each member
            var members = await target.GetMembersAsync();
            foreach (var member in members) {
                await member.SendAdaptiveCard(...);
            }
        }
    }
    ```

---

* Notifications to a channel:

  # [TypeScript](#tab/ts4)

    ```TypeScript
    // list all installation targets
    for (const target of await notificationApp.notification.installations()) {
        // "Channel" means this bot is installed to a Team (default to notify General channel)
        if (target.type === "Channel") {
            // Directly notify the Team (to the default General channel)
            await target.sendAdaptiveCard(...);

            // List all members in the Team then notify each member
            const members = await target.members();
            for (const member of members) {
                await member.sendAdaptiveCard(...);
            }

            // List all channels in the Team then notify each channel
            const channels = await target.channels();
            for (const channel of channels) {
                await channel.sendAdaptiveCard(...);
            }
        }
    }
    ```

  # [C#](#tab/csharp4)

    ```C#
    // list all installation targets
    foreach (var target in await _conversation.Notification.GetInstallationsAsync()) {
        // "Channel" means this bot is installed to a Team (default to notify General channel)
        if (target.Type == NotificationTargetType.Channel)
        {
            // Directly notify the Team (to the default General channel)
            await target.SendAdaptiveCard(...);

            // List all members in the Team then notify each member
            var members = await target.GetMembersAsync();
            foreach (var member in members) {
                await member.SendAdaptiveCard(...);
            }

            // List all channels in the Team then notify each channel
            var channels = await target.GetChannelsAsync();
            foreach (var channel in channels) {
                await channel.SendAdaptiveCard(...);
            }
        }
    }
    ```

---

* Notifications to a specific channel:

     ```TypeScript
     // find the first channel when the predicate is true.
     const channel = await notificationApp.notification.findChannel(c => Promise.resolve(c.info.name === "MyChannelName"));
    
     // send adaptive card to the specific channel.
     await channel?.sendAdaptiveCard(...);
     ```

   > [!NOTE]
   > To prevent an undefined output, ensure that you install the bot app in the **General** channel of a Team.

* Notifications to a specific person:

     ```TypeScript
     // find the first person when the predicate is true.
     const member = await notificationApp.notification.findMember(m => Promise.resolve(m.account.name === "Bob"));
    
     // send adaptive card to the specific person. 
     await member?.sendAdaptiveCard(...);
     ```

     > [!NOTE]
     > To prevent an undefined output and a missing notification, you need to include the specific person in notification installation scope.

 [Back to top](#interactive-notification-bot-in-teams)

## 