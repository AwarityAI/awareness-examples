Auto-refresh to user-specific view

When Adaptive Cards are sent in a Teams channel or group chat, all users can see the same card content. With the new refresh model for Adaptive Cards universal action, users can have a user-specific view. The auto-refresh also facilitates scenarios such as approvals, poll creator controls, ticketing, incident management, and project management cards. The following diagram illustrates how to provide user-specific view with `refresh` model:

:::image type="content" source="../../../assets/images/sbs-workflow-bot/sbs-workflow-bot-base-card-refresh.png" alt-text="Diagram shows a user specific auto-refresh model.":::

1. **Base card**: The bot sends a message with the base version of the card. This base card can be sent as a bot notification, command response, or any other card action response. All members of the conversation can view the same response. The base card is automatically refreshed to the user defined `userId` in the `refresh` property of the base card.

1. **Refresh behavior**: After the user views the message, Teams client automatically triggers a refresh a minute after the last refresh response. The user-specific view handler is invoked to return a card view `Response Card` for specific user `UserA`. Other users in the conversation can still view the base card.

The following image illustrates how user-specific view is displayed in Teams:

:::image type="content" source="../../../assets/images/sbs-workflow-bot/user-specific-views.png" alt-text="Screenshot shows a user-specific view in Teams." lightbox="../../../assets/images/sbs-workflow-bot/user-specific-views.png":::

### Add user-specific view

The following steps help you to add user-specific view with TeamsFx SDK:

<br>

</details>

<details>

<summary><b>1. Enable refresh in base Adaptive Card</b></summary>

 The user-specific views are refreshed from a base card, when response card is refreshed from the base card, as illustrated in the [auto-refresh user-specific view](#auto-refresh-to-user-specific-view). You can enable auto-refresh on the base card as follows:

* First option enables user-specific view refresh with SDK. The base card can be sent as a command response or a card action response. You can enable user-specific view refresh in `handleCommandReceived` of a command handler, or in `handleActionInvoked` of card action handler where the base card is returned. You can use `refresh(refreshVerb, userIds, data)` method from the `@microsoft/adaptivecards-tools` library to inject a refresh section into your base card. To define the refresh section, ensure that you provide the following properties:

  1. `userIds`: A set of user MRIs for those who can trigger auto-refresh. For more information on how to add in `userIds` list in refresh section of Adaptive Card, see [fetch the roster or user profile](../get-teams-context.md#fetch-the-roster-or-user-profile).
  1. `verb`: A string to identify the refresh action.
  1. `data`: An optional data to associate with the refresh action.

  In the following sample, a base card returns as command response that can auto-refresh to specific user, such as the command sender:

  ```
           import baseCard from "../adaptiveCards/baseCard.json";
           import { AdaptiveCards } from "@microsoft/adaptivecards-tools";

           export class MyCommandHandler1 implements TeamsFxBotCommandHandler {
           triggerPatterns: TriggerPatterns = "helloWorld";

           async handleCommandReceived(context: TurnContext, message: CommandMessage): 
           Promise<string | Partial<Activity> | void> {
           const refreshVerb = "userViewRefresh";        // verb to identify the refresh action
           const userIds = [ context.activity.from.id ]; // users who will be refreshed
           const data = { key: "value"};                 // optional data associated with the action

           const responseCard = AdaptiveCards
             .declare(baseCard)
             .refresh(refreshVerb, userIds, data)
             .render(cardData);
    
               return MessageFactory.attachment(CardFactory.adaptiveCard(responseCard));
           }
         }
  ```

* Second option enables user-specific view to refresh your Adaptive Card. This is a sample refresh action defined in `baseCard.json`:

  ```baseCard.json
  {
    "type": "AdaptiveCard",
    "refresh": {
      "action": {
        "type": "Action.Execute",
        "title": "Refresh",
        "verb": "userViewRefresh" ,
        "data": {
          "key": "value"
        }
      },
      "userIds": [
        "${userID}"
      ]
    },
    "body": [
      ...
    ],
    ...
  }

  ```

  You need to replace `${userID}` with user MRI in code, while rendering your card content.

<br>

</details>

<details>

<summary><b>2. Add user-specific Adaptive Card</b></summary>

You need to design the user-specific Adaptive Card to refresh a specific response card such as `responseCard.json` for `userA` shown in the diagram for [refresh behavior](#auto-refresh-to-user-specific-view). To get started, you can create a `responseCard.json` with the following content, and save it in `bot/src/adaptiveCards` folder:

```responseCard.json
-
{
  "type": "AdaptiveCard",
  "body": [
    {
      "type": "TextBlock",
      "size": "Medium",
      "weight": "Bolder",
      "text": "This is a user-specific view"
    }
  ],
  "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
  "version": "1.4"
}

```

<br>

</details>

<details>

<summary><b>3. Add card action handler to refresh views</b></summary>

You can add handler that implements `TeamsFxAdaptiveCardActionHandler` to process the refresh invoke activity that is automatically triggered in Teams:

```TypeScript
import responseCard from "../adaptiveCards/responseCard.json";

export class Handler1 implements TeamsFxBotCardActionHandler {
    triggerVerb: string = "userViewRefresh";

    async handleActionInvoked(context: TurnContext, actionData: any): Promise<InvokeResponse> {
      /**
       * If you have multiple userIds defined in your refresh action, for example: userIds: [ "<UserA>", "<userB>" ] ,
       * and you can return different card response for those users respectively with the following code sample.
        
        const currentUserId = context.activity.from.id;
        switch (currentUserId) {
          case "<userA's id>":
            const card1 = AdaptiveCards.declare(card1).render(actionData);
            return InvokeResponseFactory.adaptiveCard(card1);
          case "<userB's id>":
            const card1 = AdaptiveCards.declare(card2).render(actionData);
            return InvokeResponseFactory.adaptiveCard(card2);
        }
     */
      const responseCardJson = AdaptiveCards.declare(responseCard).render(actionData);
      return InvokeResponseFactory.adaptiveCard(responseCardJson);
    } 
}
```

<br>

</details>

<details>

<summary><b>4. Register the action handler</b></summary>

You can register the refresh action handler in `bot/src/internal/initialize.js(ts)` with the following code:

```initialize.js(ts)
export const commandBot = new ConversationBot({
  ...
  cardAction: {
    enabled: true,
    actions: [
      new Handler1()
    ],
  }
})

```

<br>

</details>

### Access Microsoft Graph

If you're responding to a command that needs to access Microsoft Graph data of an already signed in Teams user, you can do so by single sign-on (SSO) with their Teams user token. Read more about how Teams Toolkit can help you to [add single sign-on to Teams app](../../../toolkit/add-single-sign-on.md).

### Connect to existing APIs

You need to often connect to existing APIs for retrieving data to send to Teams. Teams Toolkit makes it easy for you to configure and manage authentication for existing APIs. For more information, see how to [integrate existing third party APIs](../../../toolkit/add-API-connection.md).

## FAQ

<br>

<details>

<summary><b>How to extend workflow bot with notifications?</b></summary>

Notifications add the ability in your app to send Adaptive Cards in response to external events. For example, when a message is posted to an Event Hub, your app can respond with an Adaptive Card as required. How to extend workflow bot with notifications, see [customize notifications](notification-bot-in-teams.md#customize-notification).

<br>

</details>

<details>

<summary><b>How to extend workflow bot with command and response?</b></summary>

The default workflow bot comes with command and response. For more information to extend workflow bot with command and response, see [add command and response](command-bot-in-teams.md#add-command-and-response).

<br>

</details>

## Step-by-step guide

Follow the [step-by-step](../../../sbs-gs-workflow-bot.yml) guide to build Teams workflow bot.

## See also

* [Build bots for Teams](../../what-are-bots.md)
* [Build your first bot app using JavaScript](../../../sbs-gs-bot.yml)
* [Build notification bot with JavaScript](../../../sbs-gs-notificationbot.yml)
* [Adaptive Cards](../../../task-modules-and-cards/what-are-cards.md#adaptive-cards)
* [Conversation basics](conversation-basics.md)
